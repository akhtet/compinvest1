
import sys
import csv
import copy
import datetime

import pandas as pd
import numpy as np

import QSTK.qstkutil.qsdateutil as du
import QSTK.qstkutil.DataAccess as da
import QSTK.qstkutil.tsutil as tsu
import QSTK.qstkstudy.EventProfiler as ep


def read_order_file(fname):

	symbols = set()
	max_dt = None
	min_dt = None
	order_matrix = dict()

	reader = csv.reader(open(fname, 'rU'), delimiter=',')
	for row in reader:
		print row

		symbols.add(row[3])
		order_dt = datetime.datetime(int(row[0]), int(row[1]), int(row[2]), 16, 0, 0)

		if not max_dt and not min_dt:
			max_dt = order_dt
			min_dt = order_dt

		elif order_dt > max_dt:
			max_dt = order_dt

		elif order_dt < min_dt:
			min_dt = order_dt

		if row[4].lower() == 'buy':
			coe = 1
		else:
			coe = -1

		if not order_matrix.has_key(order_dt):
			order_matrix[order_dt] = []

		order_matrix[order_dt].append((row[3], coe, int(row[5])))

	return list(symbols), min_dt, max_dt, order_matrix


def read_market_data(dt_start, dt_end, ls_symbols):

	ls_keys = ['actual_close']

	ldt_timestamps = du.getNYSEdays(dt_start, dt_end, datetime.timedelta(hours=16))
	dataobj = da.DataAccess('Yahoo')
	
	ldf_data = dataobj.get_data(ldt_timestamps, ls_symbols, ls_keys)
	d_data = dict(zip(ls_keys, ldf_data))

	for s_key in ls_keys:
		d_data[s_key] = d_data[s_key].fillna(method = 'ffill')
		d_data[s_key] = d_data[s_key].fillna(method = 'bfill')
		d_data[s_key] = d_data[s_key].fillna(1.0)

	return d_data['actual_close']


def create_share_matrix(df_close, ls_symbols, order_matrix):

	df_shares = copy.deepcopy(df_close)
	df_shares = df_shares * np.NAN

	print df_shares.keys()

	for key in sorted(order_matrix.keys()):
		print order_matrix[key]

	for timestamp in sorted(order_matrix.keys()):
		for order in order_matrix[timestamp]:
			sym, coe, amount = order
			f_symprice_today = df_close[sym].ix[timestamp]
			print timestamp, sym, f_symprice_today



if __name__ == '__main__':

	ls_symbols, dt_start, dt_end, order_matrix = read_order_file(sys.argv[1])
	ls_symbols.append('SPY')
	print ls_symbols
	print dt_start
	print dt_end

	dt_end_read = dt_end + datetime.timedelta(days=1)
	df_close = read_market_data(dt_start, dt_end_read, ls_symbols)
	print df_close['GOOG']
  
	create_share_matrix(df_close, ls_symbols, order_matrix)




